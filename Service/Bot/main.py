from Service.DateBase.Querty import *
from dotenv import load_dotenv
from pathlib import Path
import os
import logging
from telegram import Update, BotCommand, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(Path(__file__).parent.parent.parent / '.env')
TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NOTE_TEXT, REMINDER_TEXT, REMINDER_TIME = range(3)

# –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –§–ï–ô–ö –ë–ê–ó–ó–ê –ï–ü–¢
fake_db = {
    'notes': {},
    'reminders': {},
    'next_id': 1
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"],
    ], resize_keyboard=True)

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã /strart
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in fake_db['notes']:
        fake_db['notes'][user_id] = []
    if user_id not in fake_db['reminders']:
        fake_db['reminders'][user_id] = []
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!",
        reply_markup=get_main_keyboard()
    )

#–§–£–ù–ö–¶–ò–ò –ó–ê–ú–ï–¢–û–ö
async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: ",
        reply_markup=ReplyKeyboardRemove()
    )
    return NOTE_TEXT

#C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id #–ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ò–î,–°–û–û–ë–©–ï–ù–ò–ï,–û–ë–™–ï–ö–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è
    note_text = update.message.text #–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç—É
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S") #–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã –ì–û–î –ú–ï–°–Ø–¶ –î–ï–ù–¨ –ß–ê–°–´ –ú–ò–ù–£–¢–´ –°–ï–ö

    note_id = fake_db['next_id']
    fake_db['next_id'] += 1 #–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –Ω–∞ +1 –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

    fake_db['notes'][user_id].append({ #–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        'id': note_id,  #–∏–¥ –∑–∞–º–µ—Ç–∫–∏
        'text': note_text, #—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        'created_at': created_at #–¢–ê–ô–ú –∑–∞–º–µ—Ç–∫–∏
    })

    await update.message.reply_text(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n {note_text}",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

#–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫
async def viewing_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    notes = fake_db['notes'].get(user_id, [])
    
    if not notes:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫", reply_markup=get_main_keyboard())
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note in notes:
        response += f"üÜî {note['id']}\nüìÖ {note['created_at']}\nüìå {note['text']}\n\n"
    
    await update.message.reply_text(response, reply_markup=get_main_keyboard())


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def post_init(application: Application):
    commands = [
        BotCommand("note", "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        BotCommand("viewing_note", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏")
    ]
    await application.bot.set_my_commands(commands)

#–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        return await note(update, context)
    elif text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏":
        return await viewing_note(update, context)
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã")

#–ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():

    application = Application.builder().token(TOKEN).post_init(post_init).build()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    note_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('note', note), #–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /note
                    MessageHandler(filters.Regex('^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É$'), note)], #–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        states={
            NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_note)]
        }, #NOTE_TEXT - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏, MessageHandler –ª–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (filters.TEXT), –Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥—ã (~filters.COMMAND), save_note - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∑–∞–º–µ—Ç–∫—É
        fallbacks=[CommandHandler('cancel', cancel)]
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("viewing_note", viewing_note))
    application.add_handler(note_conv_handler) #—Å–≤—è–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Ü —Å —Ä–∞–±–æ—Ç–æ–π, –±–µ–∑ —ç—Ç–æ–≥–æ ConversationHandler –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()

