from Service.DateBase.Querty import *
from dotenv import load_dotenv
from pathlib import Path
import os
import logging
from telegram import Update, BotCommand, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from datetime import datetime

def bot():
# –ó–∞–≥—Ä—É–∑–∫–∞ .env
    load_dotenv(Path(__file__).parent.parent.parent / '.env')
    TOKEN = os.getenv('BOT_TOKEN')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    NOTE_TEXT, REMINDER_TEXT, REMINDER_TIME = range(3)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    fake_db = {
        'notes': {},
        'reminders': {},
        'next_id': 1
    }

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    def get_main_keyboard():
        return ReplyKeyboardMarkup([
            ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"],
        ], resize_keyboard=True)


    def get_keyboard_add():
        keybutton = [
            [InlineKeyboardButton("–£—á–µ–±–∞", callback_data='/study')],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞", callback_data='/work')],
            [InlineKeyboardButton("–°–µ–º—å—è", callback_data='/family')],
            [InlineKeyboardButton("–õ–∏—á–Ω–æ–µ", callback_data='/personal')],
            [InlineKeyboardButton("–ü—Ä–æ—á–µ–µ", callback_data='/other')],
        ]
        return InlineKeyboardMarkup(keybutton)

    def get_keyboard_check():
        keybutton = [
            [InlineKeyboardButton("–£—á–µ–±–∞", callback_data='/study_check')],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞", callback_data='/work_check')],
            [InlineKeyboardButton("–°–µ–º—å—è", callback_data='/family_check')],
            [InlineKeyboardButton("–õ–∏—á–Ω–æ–µ", callback_data='/personal_check')],
            [InlineKeyboardButton("–ü—Ä–æ—á–µ–µ", callback_data='/other_check')],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data='/all_check')],
        ]
        return InlineKeyboardMarkup(keybutton)


    #–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã /strart
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = {'idUsers': user_id}
        print(user_id)
        if checkUsers(data) == False:
            getUsers(data)
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!",
            reply_markup=get_main_keyboard()
        )

    async def note_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if update.callback_query:
            message = update.callback_query.message
        else:
            message = update.message
        
        await message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NOTE_TEXT

    async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == '/study':
            await note_add(update, context)
        # –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∑–¥–µ—Å—å

    #–§–£–ù–ö–¶–ò–ò –ó–ê–ú–ï–¢–û–ö
    async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            f'üëã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \n',
            reply_markup=get_keyboard_add()
        )
        return NOTE_TEXT

    #C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
    async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id #–ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ò–î,–°–û–û–ë–©–ï–ù–ò–ï,–û–ë–™–ï–ö–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è
        note_text = update.message.text #–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç—É
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S") #–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã –ì–û–î –ú–ï–°–Ø–¶ –î–ï–ù–¨ –ß–ê–°–´ –ú–ò–ù–£–¢–´ –°–ï–ö

        note_id = fake_db['next_id']
        fake_db['next_id'] += 1 #–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –Ω–∞ +1 –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

        fake_db['notes'][user_id].append({ #–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            'id': note_id,  #–∏–¥ –∑–∞–º–µ—Ç–∫–∏
            'text': note_text, #—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
            'created_at': created_at #–¢–ê–ô–ú –∑–∞–º–µ—Ç–∫–∏
        })

        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n {note_text}",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    #–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫
    async def viewing_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            f'üëã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \n',
            reply_markup=get_keyboard_check()
        )
        return NOTE_TEXT
        
        



    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    #–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    async def post_init(application: Application):
        commands = [
            BotCommand("note_add", "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
            BotCommand("viewing_note", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏")
        ]
        await application.bot.set_my_commands(commands)

    #–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
            await note_add(update, context)
        elif text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏":
            await viewing_note(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!")

    async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == '/study':
            await note_add(update, context)
        elif query.data == '/note':
            await note(update, context)
        
        # –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∑–¥–µ—Å—å

    #–ó–ê–ü–£–°–ö –ë–û–¢–ê
    def main():

        application = Application.builder().token(TOKEN).post_init(post_init).build()

    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        note_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('note_add', note_add),
            MessageHandler(filters.Regex('^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É$'), note),
            CallbackQueryHandler(note_add, pattern='^/study$')
        ],
        states={
            NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_note)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("viewing_note", viewing_note))
        application.add_handler(note_conv_handler) #—Å–≤—è–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Ü —Å —Ä–∞–±–æ—Ç–æ–π, –±–µ–∑ —ç—Ç–æ–≥–æ ConversationHandler –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
    if __name__ == '__main__':
        main()
    main()
bot()
